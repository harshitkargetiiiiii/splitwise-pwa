generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id
  name            String
  email           String?      @unique
  avatarUrl       String?
  defaultCurrency String       @default("USD")
  createdAt       DateTime     @default(now())
  
  memberships     Membership[]
  spacesCreated   Space[]
  postings        Posting[]
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")
}

model Space {
  id           String       @id
  name         String
  baseCurrency String
  icon         String?
  createdBy    String
  createdAt    DateTime     @default(now())
  
  creator      User         @relation(fields: [createdBy], references: [id])
  memberships  Membership[]
  expenses     Expense[]
  postings     Posting[]
  settlements  Settlement[]
}

model Membership {
  id        String   @id
  userId    String
  spaceId   String
  role      String   // OWNER, EDITOR, VIEWER
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, spaceId])
}

model Expense {
  id                String            @id
  spaceId           String
  currentRevisionId String
  createdAt         DateTime          @default(now())
  
  space             Space             @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  revisions         ExpenseRevision[]
  postings          Posting[]
}

model ExpenseRevision {
  id                   String   @id
  expenseId            String
  revision             Int
  createdBy            String
  createdAt            DateTime @default(now())
  payerId              String
  note                 String?
  category             String?
  date                 String   // ISO date string
  attachments          String?  // JSON array
  nativeAmountMinor    Int
  nativeCurrency       String
  fxRateMicrosToBase   Int
  baseAmountMinor      Int
  splitMethod          String
  exactMinor           String?  // JSON object
  percent              String?  // JSON object
  shares               String?  // JSON object
  participants         String   // JSON array
  
  expense              Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, revision])
}

model Posting {
  id          String   @id
  spaceId     String
  expenseId   String
  userId      String
  amountMinor Int      // positive = owed, negative = paid
  currency    String
  createdAt   DateTime @default(now())
  
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Settlement {
  id              String   @id
  spaceId         String
  fromUserId      String
  toUserId        String
  amountMinor     Int
  method          String?
  note            String?
  attachmentUrl   String?
  createdBy       String
  createdAt       DateTime @default(now())
  idempotencyKey  String?  @unique
  
  space           Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  fromUser        User     @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUser          User     @relation("SettlementTo", fields: [toUserId], references: [id])
}

model MagicLink {
  token     String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model InviteToken {
  token     String   @id
  spaceId   String
  role      String
  createdBy String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
